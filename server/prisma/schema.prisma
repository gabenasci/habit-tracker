// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Supports: Mongo, Cockroach, etc.
// Each one has a different nomenclature (collections, table, etc)
// That's why model is a generic name

model Habit {
  id         String   @id @default(uuid())
  // universally unique identification
  title      String
  created_at DateTime

  dayHabits DayHabit[]
  weekDays  HabitWeekDays[]

  @@map("habits") // tabela com nome "habits"
}

model HabitWeekDays {
  id       String @id @default(uuid())
  habit_id String
  week_day Int // domingo, segunda, ... - indice 0, 1, ...

  habit Habit @relation(fields: [habit_id], references: [id])
  // DIGITAR "habit Habit", formatar, remover habitId (pois campo já existe acima em snake_case)

  @@unique([habit_id, week_day]) // não pode ter mais de um habito em um dia da semana
  @@map("habit_week_days")
}

model Day {
  id   String   @id @default(uuid())
  date DateTime

  dayHabits DayHabit[] // Isso não é um campo da tabela, é para o prisma poder gerar o JS, por isso em camelCase e não snake_case

  @@unique([date]) // data tem que ser único, não pode ter dias repetidos
  @@map("days") // tabela com nome "days", só pra ser diferente do model
}

model DayHabit {
  id String @id @default(uuid())

  day_id   String
  habit_id String

  day   Day   @relation(fields: [day_id], references: [id]) // chave estrangeira, a partir de @relation é gerado com VSCode '> format' ou editor.formatOnSave
  habit Habit @relation(fields: [habit_id], references: [id]) // chave estrangeira

  @@unique([day_id, habit_id]) // não posso ter o mesmo hábito completado duas vezes para o mesmo dia
  @@map("day_habits")
}
